
@file:Suppress("unused", "FunctionName", "ClassName")
package com.rndash.mbheadunit.nativeCan.canB
import com.rndash.mbheadunit.CanFrame // AUTO GEN
import com.rndash.mbheadunit.nativeCan.CanBusNative // AUTO GEN

/**
 *   Generated by db_converter.py
 *   Object for TELEAID_POS5 (ID 0x03E9)
**/

object TELEAID_POS5 {

    /** 
     *  Returns the most recent Can Frame representing the state
     *  of TELEAID_POS5
    **/
    fun get_frame() : CanFrame? = CanBusNative.getBFrame(CanBAddrs.TELEAID_POS5)

	/** Gets GPS visible satellites **/
	fun get_gps_vsbl_sat() : Int = CanBusNative.getECUParameterB(CanBAddrs.TELEAID_POS5, 4, 4)
	
	/** Sets GPS visible satellites **/
	fun set_gps_vsbl_sat(f: CanFrame, p: Int) {
		checkFrame(f)
		CanBusNative.setFrameParameter(f, 4, 4, p)
	}
	
	/** Gets GPS tracked satellites **/
	fun get_gps_trck_sat() : Int = CanBusNative.getECUParameterB(CanBAddrs.TELEAID_POS5, 0, 4)
	
	/** Sets GPS tracked satellites **/
	fun set_gps_trck_sat(f: CanFrame, p: Int) {
		checkFrame(f)
		CanBusNative.setFrameParameter(f, 0, 4, p)
	}
	
	/** Gets GPS vertical dilution of position **/
	fun get_gps_vdop() : Int = CanBusNative.getECUParameterB(CanBAddrs.TELEAID_POS5, 8, 8)
	
	/** Sets GPS vertical dilution of position **/
	fun set_gps_vdop(f: CanFrame, p: Int) {
		checkFrame(f)
		CanBusNative.setFrameParameter(f, 8, 8, p)
	}
	
	/** Gets GPS horizontal dilution of position **/
	fun get_gps_hdop() : Int = CanBusNative.getECUParameterB(CanBAddrs.TELEAID_POS5, 16, 8)
	
	/** Sets GPS horizontal dilution of position **/
	fun set_gps_hdop(f: CanFrame, p: Int) {
		checkFrame(f)
		CanBusNative.setFrameParameter(f, 16, 8, p)
	}
	
	/** Gets GPS dilution of position **/
	fun get_gps_pdop() : Int = CanBusNative.getECUParameterB(CanBAddrs.TELEAID_POS5, 24, 8)
	
	/** Sets GPS dilution of position **/
	fun set_gps_pdop(f: CanFrame, p: Int) {
		checkFrame(f)
		CanBusNative.setFrameParameter(f, 24, 8, p)
	}
	
	/** Gets GPS fix **/
	fun get_gps_fix() : GPS_FIX = when(CanBusNative.getECUParameterB(CanBAddrs.TELEAID_POS5, 36, 4)) {
		 0 -> GPS_FIX.RES
		 1 -> GPS_FIX.NAV
		 2 -> GPS_FIX.NO_FIX
		 3 -> GPS_FIX.FIX_2D
		 4 -> GPS_FIX.FIX_3D
		 else -> throw Exception("Invalid raw value for GPS_FIX")
	}
	
	/** Sets GPS fix **/
	fun set_gps_fix(f: CanFrame, p: GPS_FIX) {
		checkFrame(f)
		CanBusNative.setFrameParameter(f, 36, 4, p.raw)
	}
	
	/** Gets Dead reckoning / map matching position reliablity  **/
	fun get_dr_mm_rel() : Int = CanBusNative.getECUParameterB(CanBAddrs.TELEAID_POS5, 40, 8)
	
	/** Sets Dead reckoning / map matching position reliablity  **/
	fun set_dr_mm_rel(f: CanFrame, p: Int) {
		checkFrame(f)
		CanBusNative.setFrameParameter(f, 40, 8, p)
	}
	
	/** Gets Dead reckoning / map matching state **/
	fun get_dr_mm_stat() : DR_MM_STAT = when(CanBusNative.getECUParameterB(CanBAddrs.TELEAID_POS5, 54, 2)) {
		 0 -> DR_MM_STAT.NONE
		 1 -> DR_MM_STAT.DR
		 2 -> DR_MM_STAT.MM
		 3 -> DR_MM_STAT.SNA
		 else -> throw Exception("Invalid raw value for DR_MM_STAT")
	}
	
	/** Sets Dead reckoning / map matching state **/
	fun set_dr_mm_stat(f: CanFrame, p: DR_MM_STAT) {
		checkFrame(f)
		CanBusNative.setFrameParameter(f, 54, 2, p.raw)
	}
	
	/** Gets Map matching route state **/
	fun get_mm_route_stat() : MM_ROUTE_STAT = when(CanBusNative.getECUParameterB(CanBAddrs.TELEAID_POS5, 52, 2)) {
		 0 -> MM_ROUTE_STAT.ROUTE_OK
		 1 -> MM_ROUTE_STAT.NO_ROUTE
		 2 -> MM_ROUTE_STAT.NDEF
		 3 -> MM_ROUTE_STAT.SNA
		 else -> throw Exception("Invalid raw value for MM_ROUTE_STAT")
	}
	
	/** Sets Map matching route state **/
	fun set_mm_route_stat(f: CanFrame, p: MM_ROUTE_STAT) {
		checkFrame(f)
		CanBusNative.setFrameParameter(f, 52, 2, p.raw)
	}
	
	/** Gets Map matching road state **/
	fun get_mm_road_stat() : MM_ROAD_STAT = when(CanBusNative.getECUParameterB(CanBAddrs.TELEAID_POS5, 50, 2)) {
		 0 -> MM_ROAD_STAT.ON_RD
		 1 -> MM_ROAD_STAT.OFF_RD
		 2 -> MM_ROAD_STAT.NDEF
		 3 -> MM_ROAD_STAT.SNA
		 else -> throw Exception("Invalid raw value for MM_ROAD_STAT")
	}
	
	/** Sets Map matching road state **/
	fun set_mm_road_stat(f: CanFrame, p: MM_ROAD_STAT) {
		checkFrame(f)
		CanBusNative.setFrameParameter(f, 50, 2, p.raw)
	}
	
	/** Gets Map matching map state **/
	fun get_mm_map_stat() : MM_MAP_STAT = when(CanBusNative.getECUParameterB(CanBAddrs.TELEAID_POS5, 48, 2)) {
		 0 -> MM_MAP_STAT.ON_MAP
		 1 -> MM_MAP_STAT.OFF_MAP
		 2 -> MM_MAP_STAT.NDEF
		 3 -> MM_MAP_STAT.SNA
		 else -> throw Exception("Invalid raw value for MM_MAP_STAT")
	}
	
	/** Sets Map matching map state **/
	fun set_mm_map_stat(f: CanFrame, p: MM_MAP_STAT) {
		checkFrame(f)
		CanBusNative.setFrameParameter(f, 48, 2, p.raw)
	}
	
	/**
     * Auto generated function
     * Throws exception if user tries to set a value in a frame
     * Not designated from the correct ECU
    **/
    private fun checkFrame(f: CanFrame) {
        if (f.canID != CanBAddrs.TELEAID_POS5.addr) {
            throw IllegalArgumentException("CAN ID does not match object!")
        }
    }

	override fun toString() = """
		|Frame TELEAID_POS5 (0x03E9):
		|	GPS visible satellites: ${get_gps_vsbl_sat()}
		|	GPS tracked satellites: ${get_gps_trck_sat()}
		|	GPS vertical dilution of position: ${get_gps_vdop()}
		|	GPS horizontal dilution of position: ${get_gps_hdop()}
		|	GPS dilution of position: ${get_gps_pdop()}
		|	GPS fix: ${get_gps_fix()}
		|	Dead reckoning / map matching position reliablity : ${get_dr_mm_rel()} %
		|	Dead reckoning / map matching state: ${get_dr_mm_stat()}
		|	Map matching route state: ${get_mm_route_stat()}
		|	Map matching road state: ${get_mm_road_stat()}
		|	Map matching map state: ${get_mm_map_stat()}
	""".trimMargin("|")
}
