
@file:Suppress("unused", "FunctionName", "ClassName")
package com.rndash.mbheadunit.nativeCan.canB
import com.rndash.mbheadunit.CanFrame // AUTO GEN
import com.rndash.mbheadunit.nativeCan.CanBusNative // AUTO GEN

/**
 *   Generated by db_converter.py
 *   Object for DBE_A2 (ID 0x0270)
**/

object DBE_A2 {

    /** 
     *  Returns the most recent Can Frame representing the state
     *  of DBE_A2
    **/
    fun get_frame() : CanFrame? = CanBusNative.getBFrame(CanBAddrs.DBE_A2)

	/** Gets Wiper request **/
	fun get_wiper_on() : Boolean = CanBusNative.getECUParameterB(CanBAddrs.DBE_A2, 7, 1) != 0
	
	/** Sets Wiper request **/
	fun set_wiper_on(f: CanFrame, p: Boolean) {
		checkFrame(f)
		CanBusNative.setFrameParameter(f, 7, 1, if(p) 1 else 0)
	}
	
	/** Gets error coding **/
	fun get_error_rs() : ERROR_RS = when(CanBusNative.getECUParameterB(CanBAddrs.DBE_A2, 4, 3)) {
		 0 -> ERROR_RS.NO_ERROR
		 1 -> ERROR_RS.ERROR_1
		 2 -> ERROR_RS.ERROR_2
		 3 -> ERROR_RS.ERROR_3
		 4 -> ERROR_RS.ERROR_4
		 5 -> ERROR_RS.ERROR_5
		 6 -> ERROR_RS.ERROR_6
		 7 -> ERROR_RS.ERROR_7
		 else -> throw Exception("Invalid raw value for ERROR_RS")
	}
	
	/** Sets error coding **/
	fun set_error_rs(f: CanFrame, p: ERROR_RS) {
		checkFrame(f)
		CanBusNative.setFrameParameter(f, 4, 3, p.raw)
	}
	
	/** Gets reinitialization done **/
	fun get_neu_ini_fertig() : Boolean = CanBusNative.getECUParameterB(CanBAddrs.DBE_A2, 3, 1) != 0
	
	/** Sets reinitialization done **/
	fun set_neu_ini_fertig(f: CanFrame, p: Boolean) {
		checkFrame(f)
		CanBusNative.setFrameParameter(f, 3, 1, if(p) 1 else 0)
	}
	
	/** Gets request not understood **/
	fun get_sende_wieder() : Boolean = CanBusNative.getECUParameterB(CanBAddrs.DBE_A2, 2, 1) != 0
	
	/** Sets request not understood **/
	fun set_sende_wieder(f: CanFrame, p: Boolean) {
		checkFrame(f)
		CanBusNative.setFrameParameter(f, 2, 1, if(p) 1 else 0)
	}
	
	/** Gets Parity from bit 0 to bit 6 (even) **/
	fun get_parity_dbe() : Boolean = CanBusNative.getECUParameterB(CanBAddrs.DBE_A2, 0, 1) != 0
	
	/** Sets Parity from bit 0 to bit 6 (even) **/
	fun set_parity_dbe(f: CanFrame, p: Boolean) {
		checkFrame(f)
		CanBusNative.setFrameParameter(f, 0, 1, if(p) 1 else 0)
	}
	
	/** Gets Wiper levels  **/
	fun get_wiper_st() : Int = CanBusNative.getECUParameterB(CanBAddrs.DBE_A2, 12, 4)
	
	/** Sets Wiper levels  **/
	fun set_wiper_st(f: CanFrame, p: Int) {
		checkFrame(f)
		CanBusNative.setFrameParameter(f, 12, 4, p)
	}
	
	/** Gets Flood detection **/
	fun get_flood() : Boolean = CanBusNative.getECUParameterB(CanBAddrs.DBE_A2, 11, 1) != 0
	
	/** Sets Flood detection **/
	fun set_flood(f: CanFrame, p: Boolean) {
		checkFrame(f)
		CanBusNative.setFrameParameter(f, 11, 1, if(p) 1 else 0)
	}
	
	/** Gets rain sensor defective **/
	fun get_rs_def() : Boolean = CanBusNative.getECUParameterB(CanBAddrs.DBE_A2, 9, 1) != 0
	
	/** Sets rain sensor defective **/
	fun set_rs_def(f: CanFrame, p: Boolean) {
		checkFrame(f)
		CanBusNative.setFrameParameter(f, 9, 1, if(p) 1 else 0)
	}
	
	/** Gets byte identifier rain sensor **/
	fun get_kenn_rs() : Boolean = CanBusNative.getECUParameterB(CanBAddrs.DBE_A2, 8, 1) != 0
	
	/** Sets byte identifier rain sensor **/
	fun set_kenn_rs(f: CanFrame, p: Boolean) {
		checkFrame(f)
		CanBusNative.setFrameParameter(f, 8, 1, if(p) 1 else 0)
	}
	
	/** Gets Diagnostics rain / light sensor on **/
	fun get_diag_rls_ein() : Boolean = CanBusNative.getECUParameterB(CanBAddrs.DBE_A2, 23, 1) != 0
	
	/** Sets Diagnostics rain / light sensor on **/
	fun set_diag_rls_ein(f: CanFrame, p: Boolean) {
		checkFrame(f)
		CanBusNative.setFrameParameter(f, 23, 1, if(p) 1 else 0)
	}
	
	/** Gets Communication error to the rain / light sensor **/
	fun get_kom_rls_fehl() : Boolean = CanBusNative.getECUParameterB(CanBAddrs.DBE_A2, 22, 1) != 0
	
	/** Sets Communication error to the rain / light sensor **/
	fun set_kom_rls_fehl(f: CanFrame, p: Boolean) {
		checkFrame(f)
		CanBusNative.setFrameParameter(f, 22, 1, if(p) 1 else 0)
	}
	
	/** Gets Measured values ​​RLS not available **/
	fun get_mess_rls_nv() : Boolean = CanBusNative.getECUParameterB(CanBAddrs.DBE_A2, 21, 1) != 0
	
	/** Sets Measured values ​​RLS not available **/
	fun set_mess_rls_nv(f: CanFrame, p: Boolean) {
		checkFrame(f)
		CanBusNative.setFrameParameter(f, 21, 1, if(p) 1 else 0)
	}
	
	/**
     * Auto generated function
     * Throws exception if user tries to set a value in a frame
     * Not designated from the correct ECU
    **/
    private fun checkFrame(f: CanFrame) {
        if (f.canID != CanBAddrs.DBE_A2.addr) {
            throw IllegalArgumentException("CAN ID does not match object!")
        }
    }

	override fun toString() = """
		|Frame DBE_A2 (0x0270):
		|	Wiper request: ${get_wiper_on()}
		|	error coding: ${get_error_rs()}
		|	reinitialization done: ${get_neu_ini_fertig()}
		|	request not understood: ${get_sende_wieder()}
		|	Parity from bit 0 to bit 6 (even): ${get_parity_dbe()}
		|	Wiper levels : ${get_wiper_st()} levels
		|	Flood detection: ${get_flood()}
		|	rain sensor defective: ${get_rs_def()}
		|	byte identifier rain sensor: ${get_kenn_rs()}
		|	Diagnostics rain / light sensor on: ${get_diag_rls_ein()}
		|	Communication error to the rain / light sensor: ${get_kom_rls_fehl()}
		|	Measured values ​​RLS not available: ${get_mess_rls_nv()}
	""".trimMargin("|")
}
