
package com.rndash.mbheadunit.nativeCan.canC

import com.rndash.mbheadunit.nativeCan.CanBusNative // AUTO GEN

/**
 *   Generated by db_converter.py
 *   Object for BS_200h (ID 0x0200)
**/

object BS_200h {

    	/** Gets Brake pad wear indicator lamp **/
	fun get_bbv_kl() : Boolean = CanBusNative.getECUParameterC(CanCAddrs.BS_200h, 7, 1) != 0
	
	/** Gets ABS defective control lamp **/
	fun get_abs_kl() : Boolean = CanBusNative.getECUParameterC(CanCAddrs.BS_200h, 5, 1) != 0
	
	/** Gets ESP defective control lamp **/
	fun get_esp_kl() : Boolean = CanBusNative.getECUParameterC(CanCAddrs.BS_200h, 4, 1) != 0
	
	/** Gets ESP info lamp steady light **/
	fun get_esp_info_dl() : Boolean = CanBusNative.getECUParameterC(CanCAddrs.BS_200h, 3, 1) != 0
	
	/** Gets ESP info lamp flashing light **/
	fun get_esp_info_bl() : Boolean = CanBusNative.getECUParameterC(CanCAddrs.BS_200h, 2, 1) != 0
	
	/** Gets BAS defective control lamp **/
	fun get_bas_kl() : Boolean = CanBusNative.getECUParameterC(CanCAddrs.BS_200h, 1, 1) != 0
	
	/** Gets brake defective control lamp (EBV_KL at 463/461 / NCV2) **/
	fun get_bre_kl() : Boolean = CanBusNative.getECUParameterC(CanCAddrs.BS_200h, 0, 1) != 0
	
	/** Gets brake light switch **/
	fun get_bls() : BLS = when(CanBusNative.getECUParameterC(CanCAddrs.BS_200h, 14, 2)) {
		 0 -> BLS.BREMSE_NBET
		 1 -> BLS.BREMSE_BET
		 2 -> BLS.NOT_DEFINED
		 3 -> BLS.SNV
		 else -> throw Exception("Invalid raw value for BLS")
	}
	
	/** Gets message counter **/
	fun get_bz200h() : Int = CanBusNative.getECUParameterC(CanCAddrs.BS_200h, 10, 4)
	
	/** Gets BLS Parity (even parity) **/
	fun get_bls_pa() : Boolean = CanBusNative.getECUParameterC(CanCAddrs.BS_200h, 9, 1) != 0
	
	/** Gets brake light suppression (EBV_KL at 163 / T0 / T1N) **/
	fun get_bls_unt() : Boolean = CanBusNative.getECUParameterC(CanCAddrs.BS_200h, 8, 1) != 0
	
	/** Gets direction of rotation of front left wheel **/
	fun get_drtgvl() : DRTGVL = when(CanBusNative.getECUParameterC(CanCAddrs.BS_200h, 16, 2)) {
		 0 -> DRTGVL.PASSIVE
		 1 -> DRTGVL.FORWARD
		 2 -> DRTGVL.REVERSE
		 3 -> DRTGVL.SNV
		 else -> throw Exception("Invalid raw value for DRTGVL")
	}
	
	/** Gets wheel speed front left **/
	fun get_dvl() : Int = CanBusNative.getECUParameterC(CanCAddrs.BS_200h, 18, 14)
	
	/** Gets direction of rotation of the front right wheel **/
	fun get_drtgvr() : DRTGVR = when(CanBusNative.getECUParameterC(CanCAddrs.BS_200h, 32, 2)) {
		 0 -> DRTGVR.PASSIVE
		 1 -> DRTGVR.FORWARD
		 2 -> DRTGVR.REVERSE
		 3 -> DRTGVR.SNV
		 else -> throw Exception("Invalid raw value for DRTGVR")
	}
	
	/** Gets wheel speed front right **/
	fun get_dvr() : Int = CanBusNative.getECUParameterC(CanCAddrs.BS_200h, 34, 14)
	
	/** Gets direction of rotation wheel left for cruise control **/
	fun get_drtgtm() : DRTGTM = when(CanBusNative.getECUParameterC(CanCAddrs.BS_200h, 48, 2)) {
		 0 -> DRTGTM.PASSIVE
		 1 -> DRTGTM.FORWARD
		 2 -> DRTGTM.REVERSE
		 3 -> DRTGTM.SNV
		 else -> throw Exception("Invalid raw value for DRTGTM")
	}
	
	/** Gets Left wheel speed for cruise control **/
	fun get_tm_dl() : Int = CanBusNative.getECUParameterC(CanCAddrs.BS_200h, 50, 14)
	
	
}
