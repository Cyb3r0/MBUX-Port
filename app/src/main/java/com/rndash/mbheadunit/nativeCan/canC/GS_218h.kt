package com.rndash.mbheadunit.nativeCan.canC


import com.rndash.mbheadunit.nativeCan.CanCAddrs
import com.rndash.mbheadunit.nativeCan.CanBusNative



/**
 *    GENERATED BY parse_kt.py
 *    Decoder class for ECU Frame GS_218h (ID: 0x0218)
**/
object GS_218h {

	/** Motormomentenanf. Toggle 40ms + -10 **/
	fun get_mtgl_egs() : Boolean = getParam(0, 1) != 0

	/** Engine torque requirement Min **/
	fun get_mmin_egs() : Boolean = getParam(1, 1) != 0

	/** Engine torque requirement Max **/
	fun get_mmax_egs() : Boolean = getParam(2, 1) != 0

	/** Geford. engine torque **/
	fun get_m_egs() : Int = getParam(3, 13)

	/** Target gear **/
	fun get_gzc() : Int = getParam(16, 4)

	/** Actual gear **/
	fun get_gic() : Int = getParam(20, 4)

	/** Best. (Wandlerüberbrück.-) clutch "slipping" **/
	fun get_k_s_b() : Boolean = getParam(24, 1) != 0

	/** Best. (Wandlerüberbrück.-) Clutch "open" **/
	fun get_k_o_b() : Boolean = getParam(25, 1) != 0

	/** Best. (Wandlerüberbrück.-) clutch "closed" **/
	fun get_k_g_b() : Boolean = getParam(26, 1) != 0

	/** off-road gear **/
	fun get_g_g() : Boolean = getParam(27, 1) != 0

	/** Basic shift program O.K. **/
	fun get_gsp_ok() : Boolean = getParam(28, 1) != 0

	/** Driving resistance is high **/
	fun get_fw_hoch() : Boolean = getParam(29, 1) != 0

	/** circuit **/
	fun get_schalt() : Boolean = getParam(30, 1) != 0

	/** Manual shift mode **/
	fun get_hsm() : Boolean = getParam(31, 1) != 0

	/** transmission ok **/
	fun get_get_ok() : Boolean = getParam(32, 1) != 0

	/** start bang **/
	fun get_ks() : Boolean = getParam(33, 1) != 0

	/** start enabling **/
	fun get_alf() : Boolean = getParam(34, 1) != 0

	/** GS in emergency operation **/
	fun get_gs_notl() : Boolean = getParam(35, 1) != 0

	/** Overtemperature gear **/
	fun get_uehitz_get() : Boolean = getParam(36, 1) != 0

	/** Kick down **/
	fun get_kd() : Boolean = getParam(37, 1) != 0

	/** Driving program for AAD **/
	fun get_fpc_aad() : Int = getParam(38, 2)

	/** Engine torque request parity (even parity) **/
	fun get_mpar_egs() : Boolean = getParam(40, 1) != 0

	/** Engagement mode / drive torque control **/
	fun get_dyn1_egs() : Boolean = getParam(41, 1) != 0

	/** Engagement mode / drive torque control **/
	fun get_dyn0_amr_egs() : Boolean = getParam(42, 1) != 0

	/** Converter lockup clutch free of load **/
	fun get_k_lstfr() : Boolean = getParam(45, 1) != 0

	/** MOT_NAUS-Confirmbit **/
	fun get_mot_naus_cnf() : Boolean = getParam(46, 1) != 0

	/** Motor Emergency Shutdown **/
	fun get_mot_naus() : Boolean = getParam(47, 1) != 0

	/** Creep (FFh at EGS, CVT) or CALID / CVN **/
	fun get_mkriech() : Int = getParam(48, 8)

	/** Status error checking **/
	fun get_fehlprf_st() : Int = getParam(56, 2)

	/** CALID / CVN-transmission active **/
	fun get_calid_cvn_akt() : Boolean = getParam(58, 1) != 0

	/** Error number or counter for CALID / CVN transmission **/
	fun get_fehler() : Int = getParam(59, 5)

	override fun toString(): String {
		return """
			MTGL_EGS: ${get_mtgl_egs()}
			MMIN_EGS: ${get_mmin_egs()}
			MMAX_EGS: ${get_mmax_egs()}
			M_EGS: ${get_m_egs()}
			GZC: ${get_gzc()}
			GIC: ${get_gic()}
			K_S_B: ${get_k_s_b()}
			K_O_B: ${get_k_o_b()}
			K_G_B: ${get_k_g_b()}
			G_G: ${get_g_g()}
			GSP_OK: ${get_gsp_ok()}
			FW_HOCH: ${get_fw_hoch()}
			SCHALT: ${get_schalt()}
			HSM: ${get_hsm()}
			GET_OK: ${get_get_ok()}
			KS: ${get_ks()}
			ALF: ${get_alf()}
			GS_NOTL: ${get_gs_notl()}
			UEHITZ_GET: ${get_uehitz_get()}
			KD: ${get_kd()}
			FPC_AAD: ${get_fpc_aad()}
			MPAR_EGS: ${get_mpar_egs()}
			DYN1_EGS: ${get_dyn1_egs()}
			DYN0_AMR_EGS: ${get_dyn0_amr_egs()}
			K_LSTFR: ${get_k_lstfr()}
			MOT_NAUS_CNF: ${get_mot_naus_cnf()}
			MOT_NAUS: ${get_mot_naus()}
			MKRIECH: ${get_mkriech()}
			FEHLPRF_ST: ${get_fehlprf_st()}
			CALID_CVN_AKT: ${get_calid_cvn_akt()}
			FEHLER: ${get_fehler()}
		""".trimIndent()
	}


	private fun getParam(o: Int, l: Int) : Int = CanBusNative.getECUParameterC(CanCAddrs.GS_218h, o, l)
}
